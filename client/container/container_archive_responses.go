// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/airking05/go-docker-api-client/models"
)

// ContainerArchiveReader is a Reader for the ContainerArchive structure.
type ContainerArchiveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ContainerArchiveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewContainerArchiveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewContainerArchiveBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewContainerArchiveNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewContainerArchiveInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewContainerArchiveOK creates a ContainerArchiveOK with default headers values
func NewContainerArchiveOK() *ContainerArchiveOK {
	return &ContainerArchiveOK{}
}

/*ContainerArchiveOK handles this case with default header values.

no error
*/
type ContainerArchiveOK struct {
}

func (o *ContainerArchiveOK) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/archive][%d] containerArchiveOK ", 200)
}

func (o *ContainerArchiveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewContainerArchiveBadRequest creates a ContainerArchiveBadRequest with default headers values
func NewContainerArchiveBadRequest() *ContainerArchiveBadRequest {
	return &ContainerArchiveBadRequest{}
}

/*ContainerArchiveBadRequest handles this case with default header values.

Bad parameter
*/
type ContainerArchiveBadRequest struct {
	Payload *models.ContainerArchiveBadRequestBody
}

func (o *ContainerArchiveBadRequest) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/archive][%d] containerArchiveBadRequest  %+v", 400, o.Payload)
}

func (o *ContainerArchiveBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ContainerArchiveBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerArchiveNotFound creates a ContainerArchiveNotFound with default headers values
func NewContainerArchiveNotFound() *ContainerArchiveNotFound {
	return &ContainerArchiveNotFound{}
}

/*ContainerArchiveNotFound handles this case with default header values.

Container or path does not exist
*/
type ContainerArchiveNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ContainerArchiveNotFound) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/archive][%d] containerArchiveNotFound  %+v", 404, o.Payload)
}

func (o *ContainerArchiveNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerArchiveInternalServerError creates a ContainerArchiveInternalServerError with default headers values
func NewContainerArchiveInternalServerError() *ContainerArchiveInternalServerError {
	return &ContainerArchiveInternalServerError{}
}

/*ContainerArchiveInternalServerError handles this case with default header values.

server error
*/
type ContainerArchiveInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ContainerArchiveInternalServerError) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/archive][%d] containerArchiveInternalServerError  %+v", 500, o.Payload)
}

func (o *ContainerArchiveInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
