// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/airking05/accepta/client/config"
	"github.com/airking05/accepta/client/container"
	"github.com/airking05/accepta/client/distribution"
	"github.com/airking05/accepta/client/exec"
	"github.com/airking05/accepta/client/image"
	"github.com/airking05/accepta/client/network"
	"github.com/airking05/accepta/client/node"
	"github.com/airking05/accepta/client/operations"
	"github.com/airking05/accepta/client/plugin"
	"github.com/airking05/accepta/client/secret"
	"github.com/airking05/accepta/client/service"
	"github.com/airking05/accepta/client/session_experimental"
	"github.com/airking05/accepta/client/swarm"
	"github.com/airking05/accepta/client/system"
	"github.com/airking05/accepta/client/task"
	"github.com/airking05/accepta/client/volume"
)

// Default accepta HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/v1.33"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http", "https"}

// NewHTTPClient creates a new accepta HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Accepta {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new accepta HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Accepta {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new accepta client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Accepta {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Accepta)
	cli.Transport = transport

	cli.Config = config.New(transport, formats)

	cli.Container = container.New(transport, formats)

	cli.Distribution = distribution.New(transport, formats)

	cli.Exec = exec.New(transport, formats)

	cli.Image = image.New(transport, formats)

	cli.Network = network.New(transport, formats)

	cli.Node = node.New(transport, formats)

	cli.Operations = operations.New(transport, formats)

	cli.Plugin = plugin.New(transport, formats)

	cli.Secret = secret.New(transport, formats)

	cli.Service = service.New(transport, formats)

	cli.SessionExperimental = session_experimental.New(transport, formats)

	cli.Swarm = swarm.New(transport, formats)

	cli.System = system.New(transport, formats)

	cli.Task = task.New(transport, formats)

	cli.Volume = volume.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Accepta is a client for accepta
type Accepta struct {
	Config *config.Client

	Container *container.Client

	Distribution *distribution.Client

	Exec *exec.Client

	Image *image.Client

	Network *network.Client

	Node *node.Client

	Operations *operations.Client

	Plugin *plugin.Client

	Secret *secret.Client

	Service *service.Client

	SessionExperimental *session_experimental.Client

	Swarm *swarm.Client

	System *system.Client

	Task *task.Client

	Volume *volume.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Accepta) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.Config.SetTransport(transport)

	c.Container.SetTransport(transport)

	c.Distribution.SetTransport(transport)

	c.Exec.SetTransport(transport)

	c.Image.SetTransport(transport)

	c.Network.SetTransport(transport)

	c.Node.SetTransport(transport)

	c.Operations.SetTransport(transport)

	c.Plugin.SetTransport(transport)

	c.Secret.SetTransport(transport)

	c.Service.SetTransport(transport)

	c.SessionExperimental.SetTransport(transport)

	c.Swarm.SetTransport(transport)

	c.System.SetTransport(transport)

	c.Task.SetTransport(transport)

	c.Volume.SetTransport(transport)

}
