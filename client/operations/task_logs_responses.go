// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/airking05/go-docker-api-client/models"
)

// TaskLogsReader is a Reader for the TaskLogs structure.
type TaskLogsReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *TaskLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 101:
		result := NewTaskLogsSwitchingProtocols(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 200:
		result := NewTaskLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewTaskLogsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewTaskLogsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewTaskLogsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTaskLogsSwitchingProtocols creates a TaskLogsSwitchingProtocols with default headers values
func NewTaskLogsSwitchingProtocols(writer io.Writer) *TaskLogsSwitchingProtocols {
	return &TaskLogsSwitchingProtocols{
		Payload: writer,
	}
}

/*TaskLogsSwitchingProtocols handles this case with default header values.

logs returned as a stream
*/
type TaskLogsSwitchingProtocols struct {
	Payload io.Writer
}

func (o *TaskLogsSwitchingProtocols) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/logs][%d] taskLogsSwitchingProtocols  %+v", 101, o.Payload)
}

func (o *TaskLogsSwitchingProtocols) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTaskLogsOK creates a TaskLogsOK with default headers values
func NewTaskLogsOK() *TaskLogsOK {
	return &TaskLogsOK{}
}

/*TaskLogsOK handles this case with default header values.

logs returned as a string in response body
*/
type TaskLogsOK struct {
	Payload string
}

func (o *TaskLogsOK) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/logs][%d] taskLogsOK  %+v", 200, o.Payload)
}

func (o *TaskLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTaskLogsNotFound creates a TaskLogsNotFound with default headers values
func NewTaskLogsNotFound() *TaskLogsNotFound {
	return &TaskLogsNotFound{}
}

/*TaskLogsNotFound handles this case with default header values.

no such task
*/
type TaskLogsNotFound struct {
	Payload *models.ErrorResponse
}

func (o *TaskLogsNotFound) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/logs][%d] taskLogsNotFound  %+v", 404, o.Payload)
}

func (o *TaskLogsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTaskLogsInternalServerError creates a TaskLogsInternalServerError with default headers values
func NewTaskLogsInternalServerError() *TaskLogsInternalServerError {
	return &TaskLogsInternalServerError{}
}

/*TaskLogsInternalServerError handles this case with default header values.

server error
*/
type TaskLogsInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *TaskLogsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/logs][%d] taskLogsInternalServerError  %+v", 500, o.Payload)
}

func (o *TaskLogsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTaskLogsServiceUnavailable creates a TaskLogsServiceUnavailable with default headers values
func NewTaskLogsServiceUnavailable() *TaskLogsServiceUnavailable {
	return &TaskLogsServiceUnavailable{}
}

/*TaskLogsServiceUnavailable handles this case with default header values.

node is not part of a swarm
*/
type TaskLogsServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *TaskLogsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/logs][%d] taskLogsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *TaskLogsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
