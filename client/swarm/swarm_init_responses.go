// Code generated by go-swagger; DO NOT EDIT.

package swarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/airking05/accepta/models"
)

// SwarmInitReader is a Reader for the SwarmInit structure.
type SwarmInitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SwarmInitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSwarmInitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSwarmInitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewSwarmInitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewSwarmInitServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSwarmInitOK creates a SwarmInitOK with default headers values
func NewSwarmInitOK() *SwarmInitOK {
	return &SwarmInitOK{}
}

/*SwarmInitOK handles this case with default header values.

no error
*/
type SwarmInitOK struct {
	Payload string
}

func (o *SwarmInitOK) Error() string {
	return fmt.Sprintf("[POST /swarm/init][%d] swarmInitOK  %+v", 200, o.Payload)
}

func (o *SwarmInitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwarmInitBadRequest creates a SwarmInitBadRequest with default headers values
func NewSwarmInitBadRequest() *SwarmInitBadRequest {
	return &SwarmInitBadRequest{}
}

/*SwarmInitBadRequest handles this case with default header values.

bad parameter
*/
type SwarmInitBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *SwarmInitBadRequest) Error() string {
	return fmt.Sprintf("[POST /swarm/init][%d] swarmInitBadRequest  %+v", 400, o.Payload)
}

func (o *SwarmInitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwarmInitInternalServerError creates a SwarmInitInternalServerError with default headers values
func NewSwarmInitInternalServerError() *SwarmInitInternalServerError {
	return &SwarmInitInternalServerError{}
}

/*SwarmInitInternalServerError handles this case with default header values.

server error
*/
type SwarmInitInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SwarmInitInternalServerError) Error() string {
	return fmt.Sprintf("[POST /swarm/init][%d] swarmInitInternalServerError  %+v", 500, o.Payload)
}

func (o *SwarmInitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwarmInitServiceUnavailable creates a SwarmInitServiceUnavailable with default headers values
func NewSwarmInitServiceUnavailable() *SwarmInitServiceUnavailable {
	return &SwarmInitServiceUnavailable{}
}

/*SwarmInitServiceUnavailable handles this case with default header values.

node is already part of a swarm
*/
type SwarmInitServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *SwarmInitServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /swarm/init][%d] swarmInitServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SwarmInitServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
