// Code generated by go-swagger; DO NOT EDIT.

package swarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/airking05/go-docker-api-client/models"
)

// SwarmJoinReader is a Reader for the SwarmJoin structure.
type SwarmJoinReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SwarmJoinReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSwarmJoinOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSwarmJoinBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewSwarmJoinInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewSwarmJoinServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSwarmJoinOK creates a SwarmJoinOK with default headers values
func NewSwarmJoinOK() *SwarmJoinOK {
	return &SwarmJoinOK{}
}

/*SwarmJoinOK handles this case with default header values.

no error
*/
type SwarmJoinOK struct {
}

func (o *SwarmJoinOK) Error() string {
	return fmt.Sprintf("[POST /swarm/join][%d] swarmJoinOK ", 200)
}

func (o *SwarmJoinOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSwarmJoinBadRequest creates a SwarmJoinBadRequest with default headers values
func NewSwarmJoinBadRequest() *SwarmJoinBadRequest {
	return &SwarmJoinBadRequest{}
}

/*SwarmJoinBadRequest handles this case with default header values.

bad parameter
*/
type SwarmJoinBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *SwarmJoinBadRequest) Error() string {
	return fmt.Sprintf("[POST /swarm/join][%d] swarmJoinBadRequest  %+v", 400, o.Payload)
}

func (o *SwarmJoinBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwarmJoinInternalServerError creates a SwarmJoinInternalServerError with default headers values
func NewSwarmJoinInternalServerError() *SwarmJoinInternalServerError {
	return &SwarmJoinInternalServerError{}
}

/*SwarmJoinInternalServerError handles this case with default header values.

server error
*/
type SwarmJoinInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SwarmJoinInternalServerError) Error() string {
	return fmt.Sprintf("[POST /swarm/join][%d] swarmJoinInternalServerError  %+v", 500, o.Payload)
}

func (o *SwarmJoinInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwarmJoinServiceUnavailable creates a SwarmJoinServiceUnavailable with default headers values
func NewSwarmJoinServiceUnavailable() *SwarmJoinServiceUnavailable {
	return &SwarmJoinServiceUnavailable{}
}

/*SwarmJoinServiceUnavailable handles this case with default header values.

node is already part of a swarm
*/
type SwarmJoinServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *SwarmJoinServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /swarm/join][%d] swarmJoinServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SwarmJoinServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
