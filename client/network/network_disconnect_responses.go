// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/airking05/accepta/models"
)

// NetworkDisconnectReader is a Reader for the NetworkDisconnect structure.
type NetworkDisconnectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NetworkDisconnectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewNetworkDisconnectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewNetworkDisconnectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewNetworkDisconnectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewNetworkDisconnectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNetworkDisconnectOK creates a NetworkDisconnectOK with default headers values
func NewNetworkDisconnectOK() *NetworkDisconnectOK {
	return &NetworkDisconnectOK{}
}

/*NetworkDisconnectOK handles this case with default header values.

No error
*/
type NetworkDisconnectOK struct {
}

func (o *NetworkDisconnectOK) Error() string {
	return fmt.Sprintf("[POST /networks/{id}/disconnect][%d] networkDisconnectOK ", 200)
}

func (o *NetworkDisconnectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewNetworkDisconnectForbidden creates a NetworkDisconnectForbidden with default headers values
func NewNetworkDisconnectForbidden() *NetworkDisconnectForbidden {
	return &NetworkDisconnectForbidden{}
}

/*NetworkDisconnectForbidden handles this case with default header values.

Operation not supported for swarm scoped networks
*/
type NetworkDisconnectForbidden struct {
	Payload *models.ErrorResponse
}

func (o *NetworkDisconnectForbidden) Error() string {
	return fmt.Sprintf("[POST /networks/{id}/disconnect][%d] networkDisconnectForbidden  %+v", 403, o.Payload)
}

func (o *NetworkDisconnectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetworkDisconnectNotFound creates a NetworkDisconnectNotFound with default headers values
func NewNetworkDisconnectNotFound() *NetworkDisconnectNotFound {
	return &NetworkDisconnectNotFound{}
}

/*NetworkDisconnectNotFound handles this case with default header values.

Network or container not found
*/
type NetworkDisconnectNotFound struct {
	Payload *models.ErrorResponse
}

func (o *NetworkDisconnectNotFound) Error() string {
	return fmt.Sprintf("[POST /networks/{id}/disconnect][%d] networkDisconnectNotFound  %+v", 404, o.Payload)
}

func (o *NetworkDisconnectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetworkDisconnectInternalServerError creates a NetworkDisconnectInternalServerError with default headers values
func NewNetworkDisconnectInternalServerError() *NetworkDisconnectInternalServerError {
	return &NetworkDisconnectInternalServerError{}
}

/*NetworkDisconnectInternalServerError handles this case with default header values.

Server error
*/
type NetworkDisconnectInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *NetworkDisconnectInternalServerError) Error() string {
	return fmt.Sprintf("[POST /networks/{id}/disconnect][%d] networkDisconnectInternalServerError  %+v", 500, o.Payload)
}

func (o *NetworkDisconnectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
