// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/airking05/accepta/models"
)

// NetworkConnectReader is a Reader for the NetworkConnect structure.
type NetworkConnectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NetworkConnectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewNetworkConnectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewNetworkConnectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewNetworkConnectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewNetworkConnectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNetworkConnectOK creates a NetworkConnectOK with default headers values
func NewNetworkConnectOK() *NetworkConnectOK {
	return &NetworkConnectOK{}
}

/*NetworkConnectOK handles this case with default header values.

No error
*/
type NetworkConnectOK struct {
}

func (o *NetworkConnectOK) Error() string {
	return fmt.Sprintf("[POST /networks/{id}/connect][%d] networkConnectOK ", 200)
}

func (o *NetworkConnectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewNetworkConnectForbidden creates a NetworkConnectForbidden with default headers values
func NewNetworkConnectForbidden() *NetworkConnectForbidden {
	return &NetworkConnectForbidden{}
}

/*NetworkConnectForbidden handles this case with default header values.

Operation not supported for swarm scoped networks
*/
type NetworkConnectForbidden struct {
	Payload *models.ErrorResponse
}

func (o *NetworkConnectForbidden) Error() string {
	return fmt.Sprintf("[POST /networks/{id}/connect][%d] networkConnectForbidden  %+v", 403, o.Payload)
}

func (o *NetworkConnectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetworkConnectNotFound creates a NetworkConnectNotFound with default headers values
func NewNetworkConnectNotFound() *NetworkConnectNotFound {
	return &NetworkConnectNotFound{}
}

/*NetworkConnectNotFound handles this case with default header values.

Network or container not found
*/
type NetworkConnectNotFound struct {
	Payload *models.ErrorResponse
}

func (o *NetworkConnectNotFound) Error() string {
	return fmt.Sprintf("[POST /networks/{id}/connect][%d] networkConnectNotFound  %+v", 404, o.Payload)
}

func (o *NetworkConnectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetworkConnectInternalServerError creates a NetworkConnectInternalServerError with default headers values
func NewNetworkConnectInternalServerError() *NetworkConnectInternalServerError {
	return &NetworkConnectInternalServerError{}
}

/*NetworkConnectInternalServerError handles this case with default header values.

Server error
*/
type NetworkConnectInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *NetworkConnectInternalServerError) Error() string {
	return fmt.Sprintf("[POST /networks/{id}/connect][%d] networkConnectInternalServerError  %+v", 500, o.Payload)
}

func (o *NetworkConnectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
