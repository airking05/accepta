// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskSpecRestartPolicy Specification for the restart policy which applies to containers created as part of this service.
// swagger:model taskSpecRestartPolicy
type TaskSpecRestartPolicy struct {

	// Condition for restart.
	Condition string `json:"Condition,omitempty"`

	// Delay between restart attempts.
	Delay int64 `json:"Delay,omitempty"`

	// Maximum attempts to restart a given container before giving up (default value is 0, which is ignored).
	MaxAttempts int64 `json:"MaxAttempts,omitempty"`

	// Windows is the time window used to evaluate the restart policy (default value is 0, which is unbounded).
	Window int64 `json:"Window,omitempty"`
}

// Validate validates this task spec restart policy
func (m *TaskSpecRestartPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskSpecRestartPolicyTypeConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","on-failure","any"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskSpecRestartPolicyTypeConditionPropEnum = append(taskSpecRestartPolicyTypeConditionPropEnum, v)
	}
}

const (

	// TaskSpecRestartPolicyConditionNone captures enum value "none"
	TaskSpecRestartPolicyConditionNone string = "none"

	// TaskSpecRestartPolicyConditionOnFailure captures enum value "on-failure"
	TaskSpecRestartPolicyConditionOnFailure string = "on-failure"

	// TaskSpecRestartPolicyConditionAny captures enum value "any"
	TaskSpecRestartPolicyConditionAny string = "any"
)

// prop value enum
func (m *TaskSpecRestartPolicy) validateConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskSpecRestartPolicyTypeConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskSpecRestartPolicy) validateCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.Condition) { // not required
		return nil
	}

	// value enum
	if err := m.validateConditionEnum("Condition", "body", m.Condition); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskSpecRestartPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskSpecRestartPolicy) UnmarshalBinary(b []byte) error {
	var res TaskSpecRestartPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
