// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ClusterInfo ClusterInfo represents information about the swarm as is returned by the
// "/info" endpoint. Join-tokens are not included.
//
// swagger:model ClusterInfo
type ClusterInfo struct {

	// Date and time at which the swarm was initialised in
	// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
	//
	CreatedAt string `json:"CreatedAt,omitempty"`

	// The ID of the swarm.
	ID string `json:"ID,omitempty"`

	// Whether there is currently a root CA rotation in progress for the swarm
	RootRotationInProgress bool `json:"RootRotationInProgress,omitempty"`

	// spec
	Spec *SwarmSpec `json:"Spec,omitempty"`

	// TLS info
	TLSInfo *TLSInfo `json:"TLSInfo,omitempty"`

	// Date and time at which the swarm was last updated in
	// [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
	//
	UpdatedAt string `json:"UpdatedAt,omitempty"`

	// version
	Version *ObjectVersion `json:"Version,omitempty"`
}

// Validate validates this cluster info
func (m *ClusterInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpec(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTLSInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterInfo) validateSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if m.Spec != nil {

		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Spec")
			}
			return err
		}

	}

	return nil
}

func (m *ClusterInfo) validateTLSInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TLSInfo) { // not required
		return nil
	}

	if m.TLSInfo != nil {

		if err := m.TLSInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TLSInfo")
			}
			return err
		}

	}

	return nil
}

func (m *ClusterInfo) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {

		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Version")
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterInfo) UnmarshalBinary(b []byte) error {
	var res ClusterInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
