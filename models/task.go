// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Task task
// swagger:model Task
type Task struct {

	// assigned generic resources
	AssignedGenericResources GenericResources `json:"AssignedGenericResources"`

	// created at
	CreatedAt string `json:"CreatedAt,omitempty"`

	// desired state
	DesiredState TaskState `json:"DesiredState,omitempty"`

	// The ID of the task.
	ID string `json:"ID,omitempty"`

	// User-defined key/value metadata.
	Labels map[string]string `json:"Labels,omitempty"`

	// Name of the task.
	Name string `json:"Name,omitempty"`

	// The ID of the node that this task is on.
	NodeID string `json:"NodeID,omitempty"`

	// The ID of the service this task is part of.
	ServiceID string `json:"ServiceID,omitempty"`

	// slot
	Slot int64 `json:"Slot,omitempty"`

	// spec
	Spec *TaskSpec `json:"Spec,omitempty"`

	// status
	Status *TaskStatus `json:"Status,omitempty"`

	// updated at
	UpdatedAt string `json:"UpdatedAt,omitempty"`

	// version
	Version *ObjectVersion `json:"Version,omitempty"`
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDesiredState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) validateDesiredState(formats strfmt.Registry) error {

	if swag.IsZero(m.DesiredState) { // not required
		return nil
	}

	if err := m.DesiredState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("DesiredState")
		}
		return err
	}

	return nil
}

func (m *Task) validateSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if m.Spec != nil {

		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Spec")
			}
			return err
		}

	}

	return nil
}

func (m *Task) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {

		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			}
			return err
		}

	}

	return nil
}

func (m *Task) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {

		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Version")
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Task) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Task) UnmarshalBinary(b []byte) error {
	var res Task
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
