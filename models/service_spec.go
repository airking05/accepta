// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ServiceSpec User modifiable configuration for a service.
// swagger:model ServiceSpec
type ServiceSpec struct {

	// endpoint spec
	EndpointSpec *EndpointSpec `json:"EndpointSpec,omitempty"`

	// User-defined key/value metadata.
	Labels map[string]string `json:"Labels,omitempty"`

	// mode
	Mode *ServiceSpecMode `json:"Mode,omitempty"`

	// Name of the service.
	Name string `json:"Name,omitempty"`

	// networks
	Networks ServiceSpecNetworks `json:"Networks"`

	// rollback config
	RollbackConfig *ServiceSpecRollbackConfig `json:"RollbackConfig,omitempty"`

	// task template
	TaskTemplate *TaskSpec `json:"TaskTemplate,omitempty"`

	// update config
	UpdateConfig *ServiceSpecUpdateConfig `json:"UpdateConfig,omitempty"`
}

// Validate validates this service spec
func (m *ServiceSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpointSpec(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRollbackConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskTemplate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdateConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceSpec) validateEndpointSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.EndpointSpec) { // not required
		return nil
	}

	if m.EndpointSpec != nil {

		if err := m.EndpointSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndpointSpec")
			}
			return err
		}

	}

	return nil
}

func (m *ServiceSpec) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if m.Mode != nil {

		if err := m.Mode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Mode")
			}
			return err
		}

	}

	return nil
}

func (m *ServiceSpec) validateRollbackConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.RollbackConfig) { // not required
		return nil
	}

	if m.RollbackConfig != nil {

		if err := m.RollbackConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RollbackConfig")
			}
			return err
		}

	}

	return nil
}

func (m *ServiceSpec) validateTaskTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskTemplate) { // not required
		return nil
	}

	if m.TaskTemplate != nil {

		if err := m.TaskTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaskTemplate")
			}
			return err
		}

	}

	return nil
}

func (m *ServiceSpec) validateUpdateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdateConfig) { // not required
		return nil
	}

	if m.UpdateConfig != nil {

		if err := m.UpdateConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateConfig")
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceSpec) UnmarshalBinary(b []byte) error {
	var res ServiceSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
