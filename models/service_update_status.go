// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceUpdateStatus The status of a service update.
// swagger:model serviceUpdateStatus
type ServiceUpdateStatus struct {

	// completed at
	CompletedAt string `json:"CompletedAt,omitempty"`

	// message
	Message string `json:"Message,omitempty"`

	// started at
	StartedAt string `json:"StartedAt,omitempty"`

	// state
	State string `json:"State,omitempty"`
}

// Validate validates this service update status
func (m *ServiceUpdateStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceUpdateStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["updating","paused","completed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceUpdateStatusTypeStatePropEnum = append(serviceUpdateStatusTypeStatePropEnum, v)
	}
}

const (

	// ServiceUpdateStatusStateUpdating captures enum value "updating"
	ServiceUpdateStatusStateUpdating string = "updating"

	// ServiceUpdateStatusStatePaused captures enum value "paused"
	ServiceUpdateStatusStatePaused string = "paused"

	// ServiceUpdateStatusStateCompleted captures enum value "completed"
	ServiceUpdateStatusStateCompleted string = "completed"
)

// prop value enum
func (m *ServiceUpdateStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceUpdateStatusTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceUpdateStatus) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("State", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceUpdateStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceUpdateStatus) UnmarshalBinary(b []byte) error {
	var res ServiceUpdateStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
