// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceSpecRollbackConfig Specification for the rollback strategy of the service.
// swagger:model serviceSpecRollbackConfig
type ServiceSpecRollbackConfig struct {

	// Amount of time between rollback iterations, in nanoseconds.
	Delay int64 `json:"Delay,omitempty"`

	// Action to take if an rolled back task fails to run, or stops running during the rollback.
	FailureAction string `json:"FailureAction,omitempty"`

	// The fraction of tasks that may fail during a rollback before the failure action is invoked, specified as a floating point number between 0 and 1.
	MaxFailureRatio float64 `json:"MaxFailureRatio,omitempty"`

	// Amount of time to monitor each rolled back task for failures, in nanoseconds.
	Monitor int64 `json:"Monitor,omitempty"`

	// The order of operations when rolling back a task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.
	Order string `json:"Order,omitempty"`

	// Maximum number of tasks to be rolled back in one iteration (0 means unlimited parallelism).
	Parallelism int64 `json:"Parallelism,omitempty"`
}

// Validate validates this service spec rollback config
func (m *ServiceSpecRollbackConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailureAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceSpecRollbackConfigTypeFailureActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["continue","pause"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceSpecRollbackConfigTypeFailureActionPropEnum = append(serviceSpecRollbackConfigTypeFailureActionPropEnum, v)
	}
}

const (

	// ServiceSpecRollbackConfigFailureActionContinue captures enum value "continue"
	ServiceSpecRollbackConfigFailureActionContinue string = "continue"

	// ServiceSpecRollbackConfigFailureActionPause captures enum value "pause"
	ServiceSpecRollbackConfigFailureActionPause string = "pause"
)

// prop value enum
func (m *ServiceSpecRollbackConfig) validateFailureActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceSpecRollbackConfigTypeFailureActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceSpecRollbackConfig) validateFailureAction(formats strfmt.Registry) error {

	if swag.IsZero(m.FailureAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateFailureActionEnum("FailureAction", "body", m.FailureAction); err != nil {
		return err
	}

	return nil
}

var serviceSpecRollbackConfigTypeOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stop-first","start-first"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceSpecRollbackConfigTypeOrderPropEnum = append(serviceSpecRollbackConfigTypeOrderPropEnum, v)
	}
}

const (

	// ServiceSpecRollbackConfigOrderStopFirst captures enum value "stop-first"
	ServiceSpecRollbackConfigOrderStopFirst string = "stop-first"

	// ServiceSpecRollbackConfigOrderStartFirst captures enum value "start-first"
	ServiceSpecRollbackConfigOrderStartFirst string = "start-first"
)

// prop value enum
func (m *ServiceSpecRollbackConfig) validateOrderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceSpecRollbackConfigTypeOrderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceSpecRollbackConfig) validateOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.Order) { // not required
		return nil
	}

	// value enum
	if err := m.validateOrderEnum("Order", "body", m.Order); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceSpecRollbackConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceSpecRollbackConfig) UnmarshalBinary(b []byte) error {
	var res ServiceSpecRollbackConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
