// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceSpecUpdateConfig Specification for the update strategy of the service.
// swagger:model serviceSpecUpdateConfig
type ServiceSpecUpdateConfig struct {

	// Amount of time between updates, in nanoseconds.
	Delay int64 `json:"Delay,omitempty"`

	// Action to take if an updated task fails to run, or stops running during the update.
	FailureAction string `json:"FailureAction,omitempty"`

	// The fraction of tasks that may fail during an update before the failure action is invoked, specified as a floating point number between 0 and 1.
	MaxFailureRatio float64 `json:"MaxFailureRatio,omitempty"`

	// Amount of time to monitor each updated task for failures, in nanoseconds.
	Monitor int64 `json:"Monitor,omitempty"`

	// The order of operations when rolling out an updated task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.
	Order string `json:"Order,omitempty"`

	// Maximum number of tasks to be updated in one iteration (0 means unlimited parallelism).
	Parallelism int64 `json:"Parallelism,omitempty"`
}

// Validate validates this service spec update config
func (m *ServiceSpecUpdateConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailureAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceSpecUpdateConfigTypeFailureActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["continue","pause","rollback"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceSpecUpdateConfigTypeFailureActionPropEnum = append(serviceSpecUpdateConfigTypeFailureActionPropEnum, v)
	}
}

const (

	// ServiceSpecUpdateConfigFailureActionContinue captures enum value "continue"
	ServiceSpecUpdateConfigFailureActionContinue string = "continue"

	// ServiceSpecUpdateConfigFailureActionPause captures enum value "pause"
	ServiceSpecUpdateConfigFailureActionPause string = "pause"

	// ServiceSpecUpdateConfigFailureActionRollback captures enum value "rollback"
	ServiceSpecUpdateConfigFailureActionRollback string = "rollback"
)

// prop value enum
func (m *ServiceSpecUpdateConfig) validateFailureActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceSpecUpdateConfigTypeFailureActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceSpecUpdateConfig) validateFailureAction(formats strfmt.Registry) error {

	if swag.IsZero(m.FailureAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateFailureActionEnum("FailureAction", "body", m.FailureAction); err != nil {
		return err
	}

	return nil
}

var serviceSpecUpdateConfigTypeOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stop-first","start-first"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceSpecUpdateConfigTypeOrderPropEnum = append(serviceSpecUpdateConfigTypeOrderPropEnum, v)
	}
}

const (

	// ServiceSpecUpdateConfigOrderStopFirst captures enum value "stop-first"
	ServiceSpecUpdateConfigOrderStopFirst string = "stop-first"

	// ServiceSpecUpdateConfigOrderStartFirst captures enum value "start-first"
	ServiceSpecUpdateConfigOrderStartFirst string = "start-first"
)

// prop value enum
func (m *ServiceSpecUpdateConfig) validateOrderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceSpecUpdateConfigTypeOrderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceSpecUpdateConfig) validateOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.Order) { // not required
		return nil
	}

	// value enum
	if err := m.validateOrderEnum("Order", "body", m.Order); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceSpecUpdateConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceSpecUpdateConfig) UnmarshalBinary(b []byte) error {
	var res ServiceSpecUpdateConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
