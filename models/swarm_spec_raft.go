// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SwarmSpecRaft Raft configuration.
// swagger:model swarmSpecRaft
type SwarmSpecRaft struct {

	// The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. `ElectionTick` must be greater than `HeartbeatTick`.
	//
	// A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
	//
	ElectionTick int64 `json:"ElectionTick,omitempty"`

	// The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.
	//
	// A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
	//
	HeartbeatTick int64 `json:"HeartbeatTick,omitempty"`

	// The number of snapshots to keep beyond the current snapshot.
	KeepOldSnapshots uint64 `json:"KeepOldSnapshots,omitempty"`

	// The number of log entries to keep around to sync up slow followers after a snapshot is created.
	LogEntriesForSlowFollowers uint64 `json:"LogEntriesForSlowFollowers,omitempty"`

	// The number of log entries between snapshots.
	SnapshotInterval uint64 `json:"SnapshotInterval,omitempty"`
}

// Validate validates this swarm spec raft
func (m *SwarmSpecRaft) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SwarmSpecRaft) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwarmSpecRaft) UnmarshalBinary(b []byte) error {
	var res SwarmSpecRaft
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
