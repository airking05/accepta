// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Resources A container's resources (cgroups config, ulimits, etc)
// swagger:model Resources
type Resources struct {

	// blkio device read bps
	BlkioDeviceReadBps ResourcesBlkioDeviceReadBps `json:"BlkioDeviceReadBps"`

	// blkio device read i ops
	BlkioDeviceReadIOps ResourcesBlkioDeviceReadIOps `json:"BlkioDeviceReadIOps"`

	// blkio device write bps
	BlkioDeviceWriteBps ResourcesBlkioDeviceWriteBps `json:"BlkioDeviceWriteBps"`

	// blkio device write i ops
	BlkioDeviceWriteIOps ResourcesBlkioDeviceWriteIOps `json:"BlkioDeviceWriteIOps"`

	// Block IO weight (relative weight).
	// Maximum: 1000
	// Minimum: 0
	BlkioWeight *int64 `json:"BlkioWeight,omitempty"`

	// blkio weight device
	BlkioWeightDevice ResourcesBlkioWeightDevice `json:"BlkioWeightDevice"`

	// Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.
	CgroupParent string `json:"CgroupParent,omitempty"`

	// The number of usable CPUs (Windows only).
	//
	// On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
	//
	CPUCount int64 `json:"CpuCount,omitempty"`

	// The usable percentage of the available CPUs (Windows only).
	//
	// On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
	//
	CPUPercent int64 `json:"CpuPercent,omitempty"`

	// The length of a CPU period in microseconds.
	CPUPeriod int64 `json:"CpuPeriod,omitempty"`

	// Microseconds of CPU time that the container can get in a CPU period.
	CPUQuota int64 `json:"CpuQuota,omitempty"`

	// The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
	CPURealtimePeriod int64 `json:"CpuRealtimePeriod,omitempty"`

	// The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
	CPURealtimeRuntime int64 `json:"CpuRealtimeRuntime,omitempty"`

	// An integer value representing this container's relative CPU weight versus other containers.
	CPUShares int64 `json:"CpuShares,omitempty"`

	// CPUs in which to allow execution (e.g., `0-3`, `0,1`)
	CpusetCpus string `json:"CpusetCpus,omitempty"`

	// Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.
	CpusetMems string `json:"CpusetMems,omitempty"`

	// a list of cgroup rules to apply to the container
	DeviceCgroupRules []string `json:"DeviceCgroupRules"`

	// devices
	Devices ResourcesDevices `json:"Devices"`

	// Disk limit (in bytes).
	DiskQuota int64 `json:"DiskQuota,omitempty"`

	// Maximum IO in bytes per second for the container system drive (Windows only)
	IOMaximumBandwidth int64 `json:"IOMaximumBandwidth,omitempty"`

	// Maximum IOps for the container system drive (Windows only)
	IOMaximumIOps int64 `json:"IOMaximumIOps,omitempty"`

	// Kernel memory limit in bytes.
	KernelMemory int64 `json:"KernelMemory,omitempty"`

	// Memory limit in bytes.
	Memory int64 `json:"Memory,omitempty"`

	// Memory soft limit in bytes.
	MemoryReservation int64 `json:"MemoryReservation,omitempty"`

	// Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.
	MemorySwap int64 `json:"MemorySwap,omitempty"`

	// Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.
	// Maximum: 100
	// Minimum: 0
	MemorySwappiness *int64 `json:"MemorySwappiness,omitempty"`

	// CPU quota in units of 10<sup>-9</sup> CPUs.
	NanoCpus int64 `json:"NanoCPUs,omitempty"`

	// Disable OOM Killer for the container.
	OomKillDisable bool `json:"OomKillDisable,omitempty"`

	// Tune a container's pids limit. Set -1 for unlimited.
	PidsLimit int64 `json:"PidsLimit,omitempty"`

	// ulimits
	Ulimits ResourcesUlimits `json:"Ulimits"`
}

// Validate validates this resources
func (m *Resources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlkioWeight(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDeviceCgroupRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMemorySwappiness(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Resources) validateBlkioWeight(formats strfmt.Registry) error {

	if swag.IsZero(m.BlkioWeight) { // not required
		return nil
	}

	if err := validate.MinimumInt("BlkioWeight", "body", int64(*m.BlkioWeight), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("BlkioWeight", "body", int64(*m.BlkioWeight), 1000, false); err != nil {
		return err
	}

	return nil
}

func (m *Resources) validateDeviceCgroupRules(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceCgroupRules) { // not required
		return nil
	}

	return nil
}

func (m *Resources) validateMemorySwappiness(formats strfmt.Registry) error {

	if swag.IsZero(m.MemorySwappiness) { // not required
		return nil
	}

	if err := validate.MinimumInt("MemorySwappiness", "body", int64(*m.MemorySwappiness), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("MemorySwappiness", "body", int64(*m.MemorySwappiness), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Resources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Resources) UnmarshalBinary(b []byte) error {
	var res Resources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
