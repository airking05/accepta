// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SwarmSpecCAConfig CA configuration.
// swagger:model swarmSpecCAConfig
type SwarmSpecCAConfig struct {

	// external c as
	ExternalCAs SwarmSpecCAConfigExternalCAs `json:"ExternalCAs"`

	// An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified in `SigningCACert` and `SigningCAKey`
	ForceRotate uint64 `json:"ForceRotate,omitempty"`

	// The duration node certificates are issued for.
	NodeCertExpiry int64 `json:"NodeCertExpiry,omitempty"`

	// The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format.
	SigningCACert string `json:"SigningCACert,omitempty"`

	// The desired signing CA key for all swarm node TLS leaf certificates, in PEM format.
	SigningCAKey string `json:"SigningCAKey,omitempty"`
}

// Validate validates this swarm spec c a config
func (m *SwarmSpecCAConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SwarmSpecCAConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwarmSpecCAConfig) UnmarshalBinary(b []byte) error {
	var res SwarmSpecCAConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
