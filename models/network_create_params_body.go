// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkCreateParamsBody network create params body
// swagger:model networkCreateParamsBody
type NetworkCreateParamsBody struct {

	// Globally scoped network is manually attachable by regular containers from workers in swarm mode.
	Attachable bool `json:"Attachable,omitempty"`

	// Check for networks with duplicate names. Since Network is primarily keyed based on a random ID and not on the name, and network name is strictly a user-friendly alias to the network which is uniquely identified using ID, there is no guaranteed way to check for duplicates. CheckDuplicate is there to provide a best effort checking of any networks which has the same name but it is not guaranteed to catch all name collisions.
	CheckDuplicate bool `json:"CheckDuplicate,omitempty"`

	// Name of the network driver plugin to use.
	Driver *string `json:"Driver,omitempty"`

	// Enable IPv6 on the network.
	EnableIPV6 bool `json:"EnableIPv6,omitempty"`

	// Optional custom IP scheme for the network.
	IPAM *IPAM `json:"IPAM,omitempty"`

	// Ingress network is the network which provides the routing-mesh in swarm mode.
	Ingress bool `json:"Ingress,omitempty"`

	// Restrict external access to the network.
	Internal bool `json:"Internal,omitempty"`

	// User-defined key/value metadata.
	Labels map[string]string `json:"Labels,omitempty"`

	// The network's name.
	// Required: true
	Name *string `json:"Name"`

	// Network specific options to be used by the drivers.
	Options map[string]string `json:"Options,omitempty"`
}

// Validate validates this network create params body
func (m *NetworkCreateParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPAM(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkCreateParamsBody) validateIPAM(formats strfmt.Registry) error {

	if swag.IsZero(m.IPAM) { // not required
		return nil
	}

	if m.IPAM != nil {

		if err := m.IPAM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IPAM")
			}
			return err
		}

	}

	return nil
}

func (m *NetworkCreateParamsBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkCreateParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkCreateParamsBody) UnmarshalBinary(b []byte) error {
	var res NetworkCreateParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
