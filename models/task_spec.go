// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TaskSpec User modifiable task configuration.
// swagger:model TaskSpec
type TaskSpec struct {

	// container spec
	ContainerSpec *TaskSpecContainerSpec `json:"ContainerSpec,omitempty"`

	// A counter that triggers an update even if no relevant parameters have been changed.
	ForceUpdate int64 `json:"ForceUpdate,omitempty"`

	// log driver
	LogDriver *TaskSpecLogDriver `json:"LogDriver,omitempty"`

	// networks
	Networks TaskSpecNetworks `json:"Networks"`

	// placement
	Placement *TaskSpecPlacement `json:"Placement,omitempty"`

	// plugin spec
	PluginSpec *TaskSpecPluginSpec `json:"PluginSpec,omitempty"`

	// resources
	Resources *TaskSpecResources `json:"Resources,omitempty"`

	// restart policy
	RestartPolicy *TaskSpecRestartPolicy `json:"RestartPolicy,omitempty"`

	// Runtime is the type of runtime specified for the task executor.
	Runtime string `json:"Runtime,omitempty"`
}

// Validate validates this task spec
func (m *TaskSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerSpec(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLogDriver(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlacement(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePluginSpec(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRestartPolicy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskSpec) validateContainerSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainerSpec) { // not required
		return nil
	}

	if m.ContainerSpec != nil {

		if err := m.ContainerSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContainerSpec")
			}
			return err
		}

	}

	return nil
}

func (m *TaskSpec) validateLogDriver(formats strfmt.Registry) error {

	if swag.IsZero(m.LogDriver) { // not required
		return nil
	}

	if m.LogDriver != nil {

		if err := m.LogDriver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LogDriver")
			}
			return err
		}

	}

	return nil
}

func (m *TaskSpec) validatePlacement(formats strfmt.Registry) error {

	if swag.IsZero(m.Placement) { // not required
		return nil
	}

	if m.Placement != nil {

		if err := m.Placement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Placement")
			}
			return err
		}

	}

	return nil
}

func (m *TaskSpec) validatePluginSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.PluginSpec) { // not required
		return nil
	}

	if m.PluginSpec != nil {

		if err := m.PluginSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PluginSpec")
			}
			return err
		}

	}

	return nil
}

func (m *TaskSpec) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {

		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resources")
			}
			return err
		}

	}

	return nil
}

func (m *TaskSpec) validateRestartPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.RestartPolicy) { // not required
		return nil
	}

	if m.RestartPolicy != nil {

		if err := m.RestartPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RestartPolicy")
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskSpec) UnmarshalBinary(b []byte) error {
	var res TaskSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
