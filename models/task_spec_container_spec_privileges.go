// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TaskSpecContainerSpecPrivileges Security options for the container
// swagger:model taskSpecContainerSpecPrivileges
type TaskSpecContainerSpecPrivileges struct {

	// credential spec
	CredentialSpec *TaskSpecContainerSpecPrivilegesCredentialSpec `json:"CredentialSpec,omitempty"`

	// s e linux context
	SELinuxContext *TaskSpecContainerSpecPrivilegesSELinuxContext `json:"SELinuxContext,omitempty"`
}

// Validate validates this task spec container spec privileges
func (m *TaskSpecContainerSpecPrivileges) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentialSpec(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSELinuxContext(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskSpecContainerSpecPrivileges) validateCredentialSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.CredentialSpec) { // not required
		return nil
	}

	if m.CredentialSpec != nil {

		if err := m.CredentialSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CredentialSpec")
			}
			return err
		}

	}

	return nil
}

func (m *TaskSpecContainerSpecPrivileges) validateSELinuxContext(formats strfmt.Registry) error {

	if swag.IsZero(m.SELinuxContext) { // not required
		return nil
	}

	if m.SELinuxContext != nil {

		if err := m.SELinuxContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SELinuxContext")
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskSpecContainerSpecPrivileges) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskSpecContainerSpecPrivileges) UnmarshalBinary(b []byte) error {
	var res TaskSpecContainerSpecPrivileges
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
