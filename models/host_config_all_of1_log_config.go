// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HostConfigAllOf1LogConfig The logging configuration for this container
// swagger:model hostConfigAllOf1LogConfig
type HostConfigAllOf1LogConfig struct {

	// config
	Config map[string]string `json:"Config,omitempty"`

	// type
	Type string `json:"Type,omitempty"`
}

// Validate validates this host config all of1 log config
func (m *HostConfigAllOf1LogConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hostConfigAllOf1LogConfigTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["json-file","syslog","journald","gelf","fluentd","awslogs","splunk","etwlogs","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hostConfigAllOf1LogConfigTypeTypePropEnum = append(hostConfigAllOf1LogConfigTypeTypePropEnum, v)
	}
}

const (

	// HostConfigAllOf1LogConfigTypeJSONFile captures enum value "json-file"
	HostConfigAllOf1LogConfigTypeJSONFile string = "json-file"

	// HostConfigAllOf1LogConfigTypeSyslog captures enum value "syslog"
	HostConfigAllOf1LogConfigTypeSyslog string = "syslog"

	// HostConfigAllOf1LogConfigTypeJournald captures enum value "journald"
	HostConfigAllOf1LogConfigTypeJournald string = "journald"

	// HostConfigAllOf1LogConfigTypeGelf captures enum value "gelf"
	HostConfigAllOf1LogConfigTypeGelf string = "gelf"

	// HostConfigAllOf1LogConfigTypeFluentd captures enum value "fluentd"
	HostConfigAllOf1LogConfigTypeFluentd string = "fluentd"

	// HostConfigAllOf1LogConfigTypeAwslogs captures enum value "awslogs"
	HostConfigAllOf1LogConfigTypeAwslogs string = "awslogs"

	// HostConfigAllOf1LogConfigTypeSplunk captures enum value "splunk"
	HostConfigAllOf1LogConfigTypeSplunk string = "splunk"

	// HostConfigAllOf1LogConfigTypeEtwlogs captures enum value "etwlogs"
	HostConfigAllOf1LogConfigTypeEtwlogs string = "etwlogs"

	// HostConfigAllOf1LogConfigTypeNone captures enum value "none"
	HostConfigAllOf1LogConfigTypeNone string = "none"
)

// prop value enum
func (m *HostConfigAllOf1LogConfig) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hostConfigAllOf1LogConfigTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HostConfigAllOf1LogConfig) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostConfigAllOf1LogConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostConfigAllOf1LogConfig) UnmarshalBinary(b []byte) error {
	var res HostConfigAllOf1LogConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
