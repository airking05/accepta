// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MountBindOptions Optional configuration for the `bind` type.
// swagger:model mountBindOptions
type MountBindOptions struct {

	// A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.
	Propagation interface{} `json:"Propagation,omitempty"`
}

// Validate validates this mount bind options
func (m *MountBindOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePropagation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mountBindOptionsTypePropagationPropEnum []interface{}

func init() {
	var res []interface{}
	if err := json.Unmarshal([]byte(`["private","rprivate","shared","rshared","slave","rslave"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mountBindOptionsTypePropagationPropEnum = append(mountBindOptionsTypePropagationPropEnum, v)
	}
}

// prop value enum
func (m *MountBindOptions) validatePropagationEnum(path, location string, value interface{}) error {
	if err := validate.Enum(path, location, value, mountBindOptionsTypePropagationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MountBindOptions) validatePropagation(formats strfmt.Registry) error {

	if swag.IsZero(m.Propagation) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MountBindOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MountBindOptions) UnmarshalBinary(b []byte) error {
	var res MountBindOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
