// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContainerInspectOKBodyState The state of the container.
// swagger:model containerInspectOKBodyState
type ContainerInspectOKBodyState struct {

	// dead
	Dead bool `json:"Dead,omitempty"`

	// error
	Error string `json:"Error,omitempty"`

	// The last exit code of this container
	ExitCode int64 `json:"ExitCode,omitempty"`

	// The time when this container last exited.
	FinishedAt string `json:"FinishedAt,omitempty"`

	// Whether this container has been killed because it ran out of memory.
	OOMKilled bool `json:"OOMKilled,omitempty"`

	// Whether this container is paused.
	Paused bool `json:"Paused,omitempty"`

	// The process ID of this container
	Pid int64 `json:"Pid,omitempty"`

	// Whether this container is restarting.
	Restarting bool `json:"Restarting,omitempty"`

	// Whether this container is running.
	//
	// Note that a running container can be _paused_. The `Running` and `Paused`
	// booleans are not mutually exclusive:
	//
	// When pausing a container (on Linux), the cgroups freezer is used to suspend
	// all processes in the container. Freezing the process requires the process to
	// be running. As a result, paused containers are both `Running` _and_ `Paused`.
	//
	// Use the `Status` field instead to determine if a container's state is "running".
	//
	Running bool `json:"Running,omitempty"`

	// The time when this container was last started.
	StartedAt string `json:"StartedAt,omitempty"`

	// The status of the container. For example, `"running"` or `"exited"`.
	//
	Status string `json:"Status,omitempty"`
}

// Validate validates this container inspect o k body state
func (m *ContainerInspectOKBodyState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var containerInspectOKBodyStateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["created","running","paused","restarting","removing","exited","dead"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		containerInspectOKBodyStateTypeStatusPropEnum = append(containerInspectOKBodyStateTypeStatusPropEnum, v)
	}
}

const (

	// ContainerInspectOKBodyStateStatusCreated captures enum value "created"
	ContainerInspectOKBodyStateStatusCreated string = "created"

	// ContainerInspectOKBodyStateStatusRunning captures enum value "running"
	ContainerInspectOKBodyStateStatusRunning string = "running"

	// ContainerInspectOKBodyStateStatusPaused captures enum value "paused"
	ContainerInspectOKBodyStateStatusPaused string = "paused"

	// ContainerInspectOKBodyStateStatusRestarting captures enum value "restarting"
	ContainerInspectOKBodyStateStatusRestarting string = "restarting"

	// ContainerInspectOKBodyStateStatusRemoving captures enum value "removing"
	ContainerInspectOKBodyStateStatusRemoving string = "removing"

	// ContainerInspectOKBodyStateStatusExited captures enum value "exited"
	ContainerInspectOKBodyStateStatusExited string = "exited"

	// ContainerInspectOKBodyStateStatusDead captures enum value "dead"
	ContainerInspectOKBodyStateStatusDead string = "dead"
)

// prop value enum
func (m *ContainerInspectOKBodyState) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, containerInspectOKBodyStateTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ContainerInspectOKBodyState) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContainerInspectOKBodyState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContainerInspectOKBodyState) UnmarshalBinary(b []byte) error {
	var res ContainerInspectOKBodyState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
