// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ExecInspectOKBody exec inspect o k body
// swagger:model execInspectOKBody
type ExecInspectOKBody struct {

	// container ID
	ContainerID string `json:"ContainerID,omitempty"`

	// exit code
	ExitCode int64 `json:"ExitCode,omitempty"`

	// ID
	ID string `json:"ID,omitempty"`

	// open stderr
	OpenStderr bool `json:"OpenStderr,omitempty"`

	// open stdin
	OpenStdin bool `json:"OpenStdin,omitempty"`

	// open stdout
	OpenStdout bool `json:"OpenStdout,omitempty"`

	// The system process ID for the exec process.
	Pid int64 `json:"Pid,omitempty"`

	// process config
	ProcessConfig *ProcessConfig `json:"ProcessConfig,omitempty"`

	// running
	Running bool `json:"Running,omitempty"`
}

// Validate validates this exec inspect o k body
func (m *ExecInspectOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProcessConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecInspectOKBody) validateProcessConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessConfig) { // not required
		return nil
	}

	if m.ProcessConfig != nil {

		if err := m.ProcessConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProcessConfig")
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExecInspectOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecInspectOKBody) UnmarshalBinary(b []byte) error {
	var res ExecInspectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
