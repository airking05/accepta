// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SwarmSpec User modifiable swarm configuration.
// swagger:model SwarmSpec
type SwarmSpec struct {

	// c a config
	CAConfig *SwarmSpecCAConfig `json:"CAConfig,omitempty"`

	// dispatcher
	Dispatcher *SwarmSpecDispatcher `json:"Dispatcher,omitempty"`

	// encryption config
	EncryptionConfig *SwarmSpecEncryptionConfig `json:"EncryptionConfig,omitempty"`

	// User-defined key/value metadata.
	Labels map[string]string `json:"Labels,omitempty"`

	// Name of the swarm.
	Name string `json:"Name,omitempty"`

	// orchestration
	Orchestration *SwarmSpecOrchestration `json:"Orchestration,omitempty"`

	// raft
	Raft *SwarmSpecRaft `json:"Raft,omitempty"`

	// task defaults
	TaskDefaults *SwarmSpecTaskDefaults `json:"TaskDefaults,omitempty"`
}

// Validate validates this swarm spec
func (m *SwarmSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCAConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDispatcher(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEncryptionConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrchestration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRaft(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskDefaults(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwarmSpec) validateCAConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.CAConfig) { // not required
		return nil
	}

	if m.CAConfig != nil {

		if err := m.CAConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CAConfig")
			}
			return err
		}

	}

	return nil
}

func (m *SwarmSpec) validateDispatcher(formats strfmt.Registry) error {

	if swag.IsZero(m.Dispatcher) { // not required
		return nil
	}

	if m.Dispatcher != nil {

		if err := m.Dispatcher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Dispatcher")
			}
			return err
		}

	}

	return nil
}

func (m *SwarmSpec) validateEncryptionConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.EncryptionConfig) { // not required
		return nil
	}

	if m.EncryptionConfig != nil {

		if err := m.EncryptionConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EncryptionConfig")
			}
			return err
		}

	}

	return nil
}

func (m *SwarmSpec) validateOrchestration(formats strfmt.Registry) error {

	if swag.IsZero(m.Orchestration) { // not required
		return nil
	}

	if m.Orchestration != nil {

		if err := m.Orchestration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Orchestration")
			}
			return err
		}

	}

	return nil
}

func (m *SwarmSpec) validateRaft(formats strfmt.Registry) error {

	if swag.IsZero(m.Raft) { // not required
		return nil
	}

	if m.Raft != nil {

		if err := m.Raft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Raft")
			}
			return err
		}

	}

	return nil
}

func (m *SwarmSpec) validateTaskDefaults(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskDefaults) { // not required
		return nil
	}

	if m.TaskDefaults != nil {

		if err := m.TaskDefaults.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaskDefaults")
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwarmSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwarmSpec) UnmarshalBinary(b []byte) error {
	var res SwarmSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
